
- ENTER, BACKSPACE, etc.. do not work with CAPS LOCK activated
- colors in galaga
- after galaga gameover does not restart well
- galaga is broken
- textbox overflows text
- behaviour of mouse in VIRTUALBOX is not correct
- it is not a bug, it is a feature. BUT we need to understand this feature:
    you can not have two windows with the same title (if you have, you will see
    just one window).
- if exit on shell on vt, it should kill all the processes working with it.
- backspacke on textbox does not work.
- backspace on shell on virtual terminal does not "repeat" (just once when 
  it is still pressed)
- there are many warnings when building. Some of them are easy to fix (just 
  including some #include <> in .c).
- you can just write on virtual terminal when you "click" on the shell frame.
  But, we need also to be able to focus the frame when you click on title bar.
- it is not clear which window is on focus.
- check how to run this xinu on real PC (some PCs work out of the box
  some not).
- move extra software to apps/ folder on root. Add proper licenses for those
  progrmas in LICENSE file.


already FIXED:

- (by Nika) when X button closes dynamic window, process does not finish
  (virtual terminal is a problem. When we click on close icon
  it should kills/finishes all the processes related with virtual
  terminal (vt, shell, vtty_out, etc).
- feature: CAPSLOCK in virtual terminal
- max number of virtual terminals running control


vtty.c code :
    vtty_in_new_char(int n, char c)	 /* new key stroke c from n virtual terminal */
	put c in buffer of n vtty (using semaphore)
	send message to vtty_in process
    
    there is a vtty_in process, waiting for a message
    when it arrives, get every char from in buffer and does the same code
    than ttyhandler_in(), but inside this process with the ch


    there is a vtty_out process, waitin for a message
    when message arrives it gets chars from out buffer of tty
    for every char it calls to vt100_put_char(n, c); /* n is the vt virtual terminal */

    tty_putc  send message to vtty_out process (when it does ttykickout for real tty)


vt.c reads chars from microui events, then calls vtty_in_new_char().
then 
           
